# Task ID: 16
# Title: Extend Database Schema for Core Models
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create and extend database models for providers, services, bookings, and schedules to support the core business logic.
# Details:
Implement the following models with migrations:

1. Provider Model:
```php
class Provider extends Model
{
    protected $fillable = [
        'user_id', 'business_name', 'address', 'contact_phone',
        'description', 'profile_image'
    ];
    
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    public function services()
    {
        return $this->hasMany(Service::class);
    }
    
    public function schedules()
    {
        return $this->hasMany(Schedule::class);
    }
}
```

2. Service Model:
```php
class Service extends Model
{
    protected $fillable = [
        'provider_id', 'title', 'description', 'duration_minutes', 'display_price'
    ];
    
    public function provider()
    {
        return $this->belongsTo(Provider::class);
    }
    
    public function bookings()
    {
        return $this->hasMany(Booking::class);
    }
}
```

3. Schedule Model:
```php
class Schedule extends Model
{
    protected $fillable = [
        'provider_id', 'day_of_week', 'start_time', 'end_time'
    ];
    
    public function provider()
    {
        return $this->belongsTo(Provider::class);
    }
}
```

4. Booking Model:
```php
class Booking extends Model
{
    protected $fillable = [
        'user_id', 'provider_id', 'service_id', 'start_datetime',
        'end_datetime', 'status', 'notes'
    ];
    
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    public function provider()
    {
        return $this->belongsTo(Provider::class);
    }
    
    public function service()
    {
        return $this->belongsTo(Service::class);
    }
}
```

Create corresponding migrations for each model with appropriate foreign key constraints and indexes.

# Test Strategy:
1. Write unit tests for each model to verify relationships and fillable attributes
2. Test database migrations up and down to ensure schema integrity
3. Manually verify database schema using SQLite GUI tool
4. Test model factories to ensure they generate valid test data
